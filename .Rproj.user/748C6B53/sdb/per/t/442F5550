{
    "collab_server" : "",
    "contents" : "require(readr)\n\n# Download the pantheria file into a folder ../../CSVs and rename the file PreETL_Pantheria.csv\nfile_path = \"PreETL_pantheria.csv\"\npantheria <- readr::read_csv(file_path)\nnames(pantheria)\n\ndf <- pantheria\nnames(df)\nstr(df) # Uncomment this line and  run just the lines to here to get column types to use for getting the list of measures.\n\ndimensions <- c(\"MSW05_Order\", \"MSW05_Family\", \"MSW05_Genus\", \"MSW05_Species\", \"MSW05_Binomial\", \"References\")\ndimensions\n\nmeasures <- setdiff(names(df), dimensions)\nmeasures\n\n# Get rid of special characters in each column.\nfor(n in names(df)) {\n  df[n] <- data.frame(lapply(df[n], gsub, pattern=\"[^ -~]\",replacement= \"\"))\n}\n\n# The following is an example of dealing with special cases like making state abbreviations be all upper case.\n# df[\"State\"] <- data.frame(lapply(df[\"State\"], toupper))\n\nna2emptyString <- function (x) {\n  x[is.na(x)] <- \"\"\n  return(x)\n}\nif( length(dimensions) > 0) {\n  for(d in dimensions) {\n    # Change NA to the empty string.\n    df[d] <- data.frame(lapply(df[d], na2emptyString))\n    # Get rid of \" and ' in dimensions.\n    df[d] <- data.frame(lapply(df[d], gsub, pattern=\"[\\\"']\",replacement= \"\"))\n    # Change & to and in dimensions.\n    df[d] <- data.frame(lapply(df[d], gsub, pattern=\"&\",replacement= \" and \"))\n    # Change : to ; in dimensions.\n    df[d] <- data.frame(lapply(df[d], gsub, pattern=\":\",replacement= \";\"))\n  }\n}\n\nna2zero <- function (x) {\n  x[is.na(x)] <- 0\n  return(x)\n}\n# Get rid of all characters in measures except for numbers, the - sign, and period.dimensions, and change NA to 0.\nif( length(measures) > 1) {\n  for(m in measures) {\n    print(m)\n    df[m] <- data.frame(lapply(df[m], gsub, pattern=\"[^--.0-9]\",replacement= \"\"))\n    df[m] <- data.frame(lapply(df[m], gsub, pattern=\"[-999]\", replacement=\"0\"))\n    df[m] <- data.frame(lapply(df[m], na2zero))\n    df[m] <- lapply(df[m], function(x) as.numeric(as.character(x))) # This is needed to turn measures back to numeric because gsub turns them into strings.\n  }\n}\nstr(df)\n\nwrite.csv(df, gsub(\"PreETL_\", \"\", file_path), row.names=FALSE, na = \"\")\n\ntableName <- gsub(\" +\", \"_\", gsub(\"[^A-z, 0-9, ]\", \"\", gsub(\".csv\", \"\", file_path)))\nsql <- paste(\"CREATE TABLE\", tableName, \"(\\n-- Change table_name to the table name you want.\\n\")\nif( length(measures) > 0 || ! is.na(dimensions)) {\n  for(d in dimensions) {\n    sql <- paste(sql, paste(d, \"varchar2(4000),\\n\"))\n  }\n}\nif( length(measures) > 0 || ! is.na(measures)) {\n  for(m in measures) {\n    if(m != tail(measures, n=1)) sql <- paste(sql, paste(m, \"number(38,4),\\n\"))\n    else sql <- paste(sql, paste(m, \"number(38,4)\\n\"))\n  }\n}\nsql <- paste(sql, \");\")\ncat(sql)",
    "created" : 1490382770284.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2930021522",
    "id" : "442F5550",
    "lastKnownWriteTime" : 1490382827,
    "last_content_update" : 1490382827007,
    "path" : "~/DV_Project4/01 Data/R_ETL.pantheria.R",
    "project_path" : "01 Data/R_ETL.pantheria.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}